input {
#   beats {
#     port => 5044
#   }
file {
    path => "/var/log/exim4/mainlog*"
    exclude => "*.gz"
    start_position => 'beginning'
	  type => "exim-log"
  }
}

filter {

  mutate {
    add_field => {
      "full_message" => "%{message}"
    }
  }

  grok {
    patterns_dir => "/etc/logstash/patterns/"
    #break_on_match => false
    keep_empty_captures => true

    match => [
      "message", "(%{EXIM_DELIVERED})",
      "message", "(%{EXIM_RECEIVED_SMTP})",
      "message", "(%{EXIM_RECEIVED_LOCAL})",
      "message", "(%{EXIM_FAILED_BLOCK})",
      "message", "(%{EXIM_FAILED_NOT_EXIST})",
      "message", "(%{EXIM_FAILED_TIMEOUT})",
      "message", "(%{EXIM_DEFERRED})",
      "message", "(%{EXIM_RE_ID})"
    ]

  }

  grok {
    patterns_dir => "/etc/logstash/patterns/"
    #break_on_match => false
    keep_empty_captures => true

    match => [
      "full_message", "(%{EXIM_DATE}) (%{EXIM_MSGID}) (%{EXIM_FLAG}) (%{EMAIL})"
    ]

  }

  date {
    match => [ "exim_date","YYYY-MM-dd HH:mm:ss" ]
    target => "exim_date"
    locale => "en"
  }

  mutate {
    add_field => { "exim_msg_state" => "not_defined" }
  }

  if [exim_flag] == "<=" {
    mutate {
      update => [ "exim_msg_state", "received" ]
    }
  } else if [exim_flag] == "=>" {
    mutate {
       update => [ "exim_msg_state", "delivered" ]
    }
  } else if [exim_flag] == "->" {
    mutate {
       update => [ "exim_msg_state", "delivered" ]
    }
  } else if [exim_flag] == ">>" {
    mutate {
       update => [ "exim_msg_state", "cutthrough_delivery" ]
    }
  } else if [exim_flag] == "*>" {
    mutate {
       update => [ "exim_msg_state", "suppressed_delivery" ]
    }
  } else if [exim_flag] == "==" {
    mutate {
       update => [ "exim_msg_state", "deferred" ]
    }
  } else if [exim_flag] == "**" {
    mutate {
       update => [ "exim_msg_state", "failed" ]
    }
  } else if "Completed QT=" in [message] {
    mutate {
       update => [ "exim_msg_state", "completed" ]
    }
  } else if [message] =~ /(rejected after DATA|rejected \(but fed to sa-learn\))/ {
    mutate {
       update => [ "exim_msg_state", "rejected_after_data" ]
    }
  } else if " rejected " in [message] {
    mutate {
       update => [ "exim_msg_state", "rejected_smtp_transaction" ]
    }
  }
  # if [exim_msg_state] == "delivered" or [exim_msg_state] == "completed" {

  #   mutate {
  #     add_field => {"exim_qt" => 0}
  #   }

  #   if [exim_qt_s] {
  #     ruby {
  #            code => "event.set('exim_qt', event.get('exim_qt').to_i + event.get('exim_qt_s').to_i)"
  #          }
  #   }

  #   if [exim_qt_m] {
  #     ruby {
  #            code => "event.set('exim_qt', event.get('exim_qt').to_i + event.get('exim_qt_m').to_i*60)"
  #          }
  #   }

  #   if [exim_qt_h] {
  #     ruby {
  #            code => "event.set('exim_qt', event.get('exim_qt').to_i + event.get('exim_qt_h').to_i*3600)"
  #          }
  #   }

  #   if [exim_qt_d] {
  #     ruby {
  #            code => "event.set('exim_qt', event.get('exim_qt').to_i + event.get('exim_qt_d').to_i*86400)"
  #          }
  #   }

  #   mutate {
  #     remove_field => ["exim_qt_d", "exim_qt_h", "exim_qt_m", "exim_qt_s"]
  #   }
  # }

    if !("_grokparsefailure" in [tags]) {
      mutate {
            remove_field => ["message"]
        }
    }
#  } else {
#     if [message] =~ /Message is frozen|Frozen \(delivery error message\)|(Start|End) queue run|retry time not reached|no (IP address|host name) found for (IP address|host)|unexpected disconnection while reading SMTP command|another process is handling this message|SSL verify error|TSL error on connection|TLS client disconnected|SSL_write|Connection (refused|timed out)/ {
#      drop { }
#     }
#  }

}


output
{
	stdout {
		codec => dots
	}
 	elasticsearch {
    	hosts => ["127.0.0.1:9200"]
		  index => "log-exim-%{+YYYY.MM.dd}"
      user => "elastic"
      password => "changeme"
  	}
}
